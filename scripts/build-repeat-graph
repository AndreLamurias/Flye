#!/usr/bin/env python2

import argparse
import os
import sys
import subprocess

flye_root = os.path.dirname(os.path.dirname(os.path.realpath(__file__)))
sys.path.insert(0, flye_root)
import flye.config.py_cfg as cfg

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("-i", "--input-assembly", required=True,
                        help="Path to the input assembly")
    parser.add_argument("-r", "--reads", required=False, default=None,
                        help="Reads to simplify the graph")
    parser.add_argument("-o", "--out-dir", required=True,
                        help="Output directory")
    parser.add_argument("-t", "--threads", type=int, default=1,
                        help="number of parallel threads (default: 1)")
    parser.add_argument("--min-overlap", type=int, default=500,
                        help="Minimum overlap size (default: 500)",
                        dest="min_overlap")
    parser.add_argument("--max-divergence", type=float, default=0.05,
                        help="Maximum overlap divergence (default: 0.05)")
    parser.add_argument("--match-mode", type=str, default="local",
                        help="Match mode: (local), semi, dovetail",
                        dest="match_mode")
    args = parser.parse_args()

    READ_TYPE = "corrected"

    flye_root = os.path.dirname(os.path.dirname(os.path.realpath(__file__)))
    flye_repeat_bin = os.path.join(flye_root, "bin", "flye-modules")
    #config = os.path.join(flye_root, "flye", "config", "bin_cfg", "asm_corrected_reads.cfg")
    config = os.path.join(flye_root, "flye", cfg.vals["bin_cfg"][READ_TYPE])

    if not os.path.isdir(args.out_dir):
        os.mkdir(args.out_dir)
    log_file = os.path.join(args.out_dir, "flye.log")

    kmer_size = cfg.vals["kmer_size"][READ_TYPE]

    cmd = [flye_repeat_bin, "repeat"]
    cmd.extend(["--min-ovlp", str(args.min_overlap)])
    cmd.extend(["--threads", str(args.threads)])
    cmd.extend(["--log", log_file])
    cmd.extend(["--match-mode", args.match_mode])
    cmd.extend(["--max-divergence", str(args.max_divergence)])
    cmd.extend(["--input-seq", args.input_assembly])
    cmd.extend(["--config", config])
    cmd.extend(["--out-dir", args.out_dir])
    cmd.extend(["--kmer", str(kmer_size)])
    if args.reads:
        cmd.extend(["--reads", args.reads])
    #print(" ".join(cmd))
    subprocess.check_call(cmd)


if __name__ == "__main__":
    main()
